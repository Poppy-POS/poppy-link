{"version":3,"sources":["poppy.ts"],"names":[],"mappings":";AA2EA,aAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,MAAA,GAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,QAAA,QAAA,GAAA,KAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,WAAA,IAAA,EAAA,KAAA,EAAA,UAAA,OAAA,IAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,OAAA,MAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3EA,IAAK,GAAL,SAAK,GACH,EAAA,SAAA,WACA,EAAA,QAAA,UACA,EAAA,QAAA,UAHF,CAAK,IAAA,EAAa,KAsBlB,IAAM,EAAY,CAChB,QAAS,wDACT,OAAQ,wDAKJ,EA8CN,WAAA,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,iBA7CiB,MAAA,SAAA,EAAmB,EAAgB,GAC1C,IAAA,EAAO,CACX,SAAU,MACV,OAAA,EACA,YAAA,EACA,eAAgB,GAEX,OAAA,EAA2B,EAAU,QAAS,OAAQ,KAsCjE,CAAA,IAAA,mBAnCmB,MAAA,SAAA,GACR,OAAA,EAAmC,EAAU,OAAS,KAkCjE,CAAA,IAAA,mBA/BmB,MAAA,SAAA,EAAY,GACrB,IAAA,EAAO,KACT,EAA2C,KAEzC,EAAe,SAAC,GAEb,OADP,QAAQ,KAAK,mBACN,EAAK,iBAAiB,IAGzB,EAAgB,YAAW,EAAC,mBAAA,KAAA,SAAA,IAAA,IAAA,EAAA,OAAA,mBAAA,KAAA,SAAA,GAAA,OAAA,OAAA,EAAA,KAAA,EAAA,MAAA,KAAA,EACT,OADS,EAAA,KAAA,EACT,EAAa,GADJ,KAAA,EAC1B,EAD0B,EAAA,KAE5B,IAAe,IACjB,EAAa,EACb,EAAG,IAGD,EAAS,SAAW,EAAc,UACpC,cAAc,GARgB,KAAA,EAAA,IAAA,MAAA,OAAA,EAAA,SAAA,MAU/B,SAYP,EAAA,GARM,EAAY,WAET,OADP,QAAQ,KAAK,sBACN,IAAI,GAGZ,OAAe,UAAY,IAG5B,IAAM,EAAc,SAAI,GAAa,IAAA,EAAyB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,MAAO,EAAuD,UAAA,OAAA,EAAA,UAAA,QAAA,EACpH,EAA2B,GAU1B,MARQ,SAAX,IACF,EAAY,OAAS,EACrB,EAAY,KAAO,KAAK,UAAU,GAClC,EAAY,QAAU,CACJ,eAAA,qBAIb,MAAM,EAAK,GACf,KAAK,SAAA,GAAO,OAAA,EAAI","file":"poppy.js","sourceRoot":"../src","sourcesContent":["enum PaymentStatus {\n  COMPLETE = 'COMPLETE',\n  PENDING = 'PENDING',\n  EXPIRED = 'EXPIRED'\n}\n\ntype PaymentBody = {\n  amount: number;\n  currency: number;\n  address_target: string;\n  description: string;\n}\n\ntype PaymentResult = {\n  id: number;\n  address: string;\n  amount: number;\n  currency: number;\n  address_target: string;\n  description: string;\n}\n\nconst ENDPOINTS = {\n  REQUEST: 'https://api.poppypos.com/commerce/v1/payment/generate',\n  STATUS: 'https://api.poppypos.com/commerce/v1/payment/status/'\n}\n\ntype PaymentStatusResponse = { status: PaymentStatus }\n\nclass Poppy {\n  requestPayment(toAddress: string, amount: number, description: string): Promise<PaymentResult> {\n    const body = {\n      currency: 'TRX',\n      amount,\n      description,\n      address_target: toAddress\n    }\n    return fetchHelper<PaymentResult>(ENDPOINTS.REQUEST, 'POST', body)\n  }\n\n  getPaymentStatus(id: string): Promise<PaymentStatusResponse> {\n    return fetchHelper<PaymentStatusResponse>(ENDPOINTS.STATUS + id)\n  }\n\n  paymentSubscribe(id: string, cb: (status: PaymentStatusResponse) => void) {\n    const self = this;\n    let lastStatus: PaymentStatusResponse | null = null;\n\n    const fetchPayment = (id: string): Promise<PaymentStatusResponse> => {\n      console.info('Fetching status');\n      return self.getPaymentStatus(id);\n    };\n\n    const statusPolling = setInterval(async () => {\n      const fetchRes = await fetchPayment(id);\n      if (lastStatus !== fetchRes) {\n        lastStatus = fetchRes;\n        cb(fetchRes);\n      }\n\n      if (fetchRes.status === PaymentStatus.COMPLETE) {\n        clearInterval(statusPolling);\n      }\n    }, 1000);\n  }\n}\n\nconst PoppyLink = () => {\n  console.info('Starting PoppyLink');\n  return new Poppy();\n};\n\n(window as any).PoppyLink = PoppyLink();\n\n\nconst fetchHelper = <T>(url: string, method: 'GET' | 'POST' = 'GET', body?: {[key: string]: string | number}): Promise<T> => {\n  const initOptions: RequestInit = {}\n\n  if (method === 'POST') {\n    initOptions.method = method\n    initOptions.body = JSON.stringify(body) as any\n    initOptions.headers = {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  return fetch(url, initOptions)\n    .then(res => res.json())\n}\n"]}